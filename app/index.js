// Generated by CoffeeScript 1.4.0
(function() {
  var Store, app, asCsv, express, fork, port, store;

  express = require('express');

  Store = require('./storage').Store;

  fork = require('child_process').fork;

  app = express();

  store = new Store('events');

  asCsv = function(fields, data, callback) {
    var arrayToCsv;
    if (process.env.NO_FORK) {
      arrayToCsv = require('./csv').arrayToCsv;
      return callback(arrayToCsv(fields, data));
    } else {
      fork("" + __dirname + "/csv");
      toCsv.on('message', function(message) {
        return callback(message);
      });
      return toCsv.send({
        fields: fields,
        data: data
      });
    }
  };

  app.get('/events/add', function(req, res) {
    var event, timestamp;
    event = req.query;
    timestamp = event.timestamp;
    return store.write(timestamp, event, function() {
      res.setHeader('Content-Type', 'application/json');
      return res.status(200).send('{"status": "OK"}');
    });
  });

  app.get('/csv/events', function(req, res) {
    var fields, from, to, _ref;
    from = 1 * req.query.from;
    to = 1 * req.query.to;
    fields = (_ref = req.query.fields) != null ? _ref.split(',') : void 0;
    if (from && to && fields) {
      return store.read(from, to, function(err, data) {
        res.setHeader('Content-Type', 'text/csv');
        return asCsv(fields, data, function(csv) {
          return res.status(200).send(csv);
        });
      });
    } else {
      return res.status(400).send('400');
    }
  });

  port = process.env.PORT || 5000;

  app.listen(port, function() {
    return console.log("Listening on port " + port);
  });

  module.exports = app;

}).call(this);
